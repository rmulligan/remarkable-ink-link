diff --git a/src/inklink/services/pdf_service.py b/src/inklink/services/pdf_service.py
index 0b31a5a..b5f2aa0 100644
--- a/src/inklink/services/pdf_service.py
+++ b/src/inklink/services/pdf_service.py
@@ -163,89 +163,89 @@ class PDFService:
         The node graph is generated using Graphviz and embedded in the PDF.
         Each node represents a page, with edges for cross-references.
         The PDF includes a table of pages with titles, summaries, page numbers, and device locations.
-    """
-    import tempfile
-    from graphviz import Digraph
-    from reportlab.lib.pagesizes import letter
-    from reportlab.pdfgen import canvas
-    from reportlab.platypus import (
-        Table,
-        TableStyle,
-        SimpleDocTemplate,
-        Paragraph,
-        Spacer,
-    )
-    from reportlab.lib import colors
-    from reportlab.lib.styles import getSampleStyleSheet
-    import os
-
-    # Step 1: Build the node graph using Graphviz
-    dot = Digraph(comment=graph_title)
-    for page in pages:
-        label = f"{page['page_number']}: {page['title']}"
-        dot.node(str(page["page_number"]), label)
-    for page in pages:
-        if "links" in page:
-            for ref in page["links"]:
-                dot.edge(str(page["page_number"]), str(ref))
-
-    # Step 2: Render the graph to a temporary PNG file
-    with tempfile.TemporaryDirectory() as tmpdir:
-        graph_path = os.path.join(tmpdir, "index_graph.png")
-        dot.render(filename=graph_path, format="png", cleanup=True)
-        graph_img_path = graph_path + ".png"
-
-        # Step 3: Build the PDF
-        doc = SimpleDocTemplate(output_path, pagesize=letter)
-        elements = []
-        styles = getSampleStyleSheet()
-        elements.append(Paragraph(graph_title, styles["Title"]))
-        elements.append(Spacer(1, 12))
-
-        # Insert the node graph image
-        from reportlab.platypus import Image
-
-        elements.append(Image(graph_img_path, width=500, height=300))
-        elements.append(Spacer(1, 24))
-
-        # Table of pages
-        data = [["Page", "Title", "Summary", "Device Location"]]
-        for page in pages:
-            data.append(
-                [
-                    page["page_number"],
-                    page["title"],
-                    page.get("summary", ""),
-                    page.get("device_location", ""),
-                ]
-            )
-        table = Table(data, repeatRows=1)
-        table.setStyle(
-            TableStyle(
-                [
-                    ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
-                    ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
-                    ("ALIGN", (0, 0), (-1, -1), "LEFT"),
-                    ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
-                    ("BOTTOMPADDING", (0, 0), (-1, 0), 12),
-                    ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
-                    ("GRID", (0, 0), (-1, -1), 1, colors.black),
-                ]
-            )
+        """
+        import tempfile
+        from graphviz import Digraph
+        from reportlab.lib.pagesizes import letter
+        from reportlab.pdfgen import canvas
+        from reportlab.platypus import (
+            Table,
+            TableStyle,
+            SimpleDocTemplate,
+            Paragraph,
+            Spacer,
         )
-        elements.append(table)
-        elements.append(Spacer(1, 24))
+        from reportlab.lib import colors
+        from reportlab.lib.styles import getSampleStyleSheet
+        import os
 
-        # Add cross-reference details
-        elements.append(Paragraph("Cross-References", styles["Heading2"]))
+        # Step 1: Build the node graph using Graphviz
+        graphviz_obj = Digraph(comment=graph_title)
         for page in pages:
-            if "links" in page and page["links"]:
-                refs = ", ".join(str(ref) for ref in page["links"])
-                elements.append(
-                    Paragraph(
-                        f"Page {page['page_number']} references: {refs}",
-                        styles["Normal"],
-                    )
+            label = f"{page['page_number']}: {page['title']}"
+            graphviz_obj.node(str(page["page_number"]), label)
+        for page in pages:
+            if "links" in page:
+                for ref in page["links"]:
+                    graphviz_obj.edge(str(page["page_number"]), str(ref))
+
+        # Step 2: Render the graph to a temporary PNG file
+        with tempfile.TemporaryDirectory() as tmpdir:
+            graph_path = os.path.join(tmpdir, "index_graph.png")
+            graphviz_obj.render(filename=graph_path, format="png", cleanup=True)
+            graph_img_path = graph_path + ".png"
+
+            # Step 3: Build the PDF
+            doc = SimpleDocTemplate(output_path, pagesize=letter)
+            elements = []
+            styles = getSampleStyleSheet()
+            elements.append(Paragraph(graph_title, styles["Title"]))
+            elements.append(Spacer(1, 12))
+
+            # Insert the node graph image
+            from reportlab.platypus import Image
+
+            elements.append(Image(graph_img_path, width=500, height=300))
+            elements.append(Spacer(1, 24))
+
+            # Table of pages
+            data = [["Page", "Title", "Summary", "Device Location"]]
+            for page in pages:
+                data.append(
+                    [
+                        page["page_number"],
+                        page["title"],
+                        page.get("summary", ""),
+                        page.get("device_location", ""),
+                    ]
+                )
+            table = Table(data, repeatRows=1)
+            table.setStyle(
+                TableStyle(
+                    [
+                        ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
+                        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
+                        ("ALIGN", (0, 0), (-1, -1), "LEFT"),
+                        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
+                        ("BOTTOMPADDING", (0, 0), (-1, 0), 12),
+                        ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
+                        ("GRID", (0, 0), (-1, -1), 1, colors.black),
+                    ]
                 )
+            )
+            elements.append(table)
+            elements.append(Spacer(1, 24))
+
+            # Add cross-reference details
+            elements.append(Paragraph("Cross-References", styles["Heading2"]))
+            for page in pages:
+                if "links" in page and page["links"]:
+                    refs = ", ".join(str(ref) for ref in page["links"])
+                    elements.append(
+                        Paragraph(
+                            f"Page {page['page_number']} references: {refs}",
+                            styles["Normal"],
+                        )
+                    )
 
-        doc.build(elements)
+            doc.build(elements)
diff --git a/src/inklink/utils/hcl_render.py b/src/inklink/utils/hcl_render.py
index 29632a8..b94ac5f 100644
--- a/src/inklink/utils/hcl_render.py
+++ b/src/inklink/utils/hcl_render.py
@@ -1,11 +1,28 @@
-from rmc.render import render_template
-from src.inklink.config import HCLResourceConfig
+import jinja2
+from inklink.config import HCLResourceConfig
 
 
 def render_hcl_resource(
-    config: HCLResourceConfig, template_path: str = "src/inklink/hcl_templates/main.j2"
+    config: HCLResourceConfig, template_path: str = "inklink/hcl_templates/main.j2"
 ) -> str:
     """
     Render an HCL resource using the provided config and Jinja2 template.
     """
-    return render_template(template_path, config.dict())
+    # Simple Jinja2 rendering implementation to replace rmc.render dependency
+    try:
+        with open(template_path, "r") as f:
+            template_str = f.read()
+        template = jinja2.Template(template_str)
+        return template.render(**config.dict())
+    except Exception as e:
+        print(f"Error rendering template: {e}")
+        # Fallback to basic HCL rendering
+        attributes = config.attributes or {}
+        result = [f'resource "{config.resource_type}" "{config.resource_name}" {{']
+        for key, value in attributes.items():
+            if isinstance(value, str):
+                result.append(f'  {key} = "{value}"')
+            else:
+                result.append(f"  {key} = {value}")
+        result.append("}")
+        return "\n".join(result)
diff --git a/src/inklink/utils/template_service.py b/src/inklink/utils/template_service.py
index 5cfb0ff..3e42345 100644
--- a/src/inklink/utils/template_service.py
+++ b/src/inklink/utils/template_service.py
@@ -1,5 +1,5 @@
-from src.inklink.config import HCLResourceConfig
-from src.inklink.utils.hcl_render import render_hcl_resource
+from inklink.config import HCLResourceConfig
+from inklink.utils.hcl_render import render_hcl_resource
 
 
 class HCLTemplateService:
@@ -10,6 +10,6 @@ class HCLTemplateService:
     def render(
         self,
         config: HCLResourceConfig,
-        template_path: str = "src/inklink/hcl_templates/main.j2",
+        template_path: str = "inklink/hcl_templates/main.j2",
     ) -> str:
         return render_hcl_resource(config, template_path)
diff --git a/tests/test_hcl_render.py b/tests/test_hcl_render.py
index 834c06f..163a0bf 100644
--- a/tests/test_hcl_render.py
+++ b/tests/test_hcl_render.py
@@ -1,6 +1,6 @@
 import pytest
-from src.inklink.config import HCLResourceConfig
-from src.inklink.utils.hcl_render import render_hcl_resource
+from inklink.config import HCLResourceConfig
+from inklink.utils.hcl_render import render_hcl_resource
 
 
 def test_render_hcl_resource_basic():
diff --git a/tests/test_web_ui_endpoints.py b/tests/test_web_ui_endpoints.py
index 92a0d56..2f9ff29 100644
--- a/tests/test_web_ui_endpoints.py
+++ b/tests/test_web_ui_endpoints.py
@@ -2,7 +2,7 @@ import io
 import json
 import tempfile
 from http.server import HTTPServer
-from src.inklink.server import URLHandler, run_server
+from inklink.server import URLHandler, run_server
 
 import pytest
 
