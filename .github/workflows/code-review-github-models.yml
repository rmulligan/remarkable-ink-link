name: Code Review with GitHub Models

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Dependencies
        run: |
          pip install requests pydantic
          
      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v45
        
      - name: Review Code with GitHub Models
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          cat > review.py << 'EOF'
          import os
          import json
          import requests
          from typing import List, Dict, Any

          def get_diff_content(repo_full_name: str, pr_number: int) -> str:
              """Get the PR diff content."""
              headers = {
                  "Authorization": f"Bearer {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3.diff"
              }
              url = f"https://api.github.com/repos/{repo_full_name}/pulls/{pr_number}"
              response = requests.get(url, headers=headers)
              return response.text

          def review_with_github_models(diff_content: str) -> Dict[str, Any]:
              """Use GitHub Models API to review code."""
              headers = {
                  "Authorization": f"Bearer {os.environ['GITHUB_TOKEN']}",
                  "Content-Type": "application/json",
              }
              
              # Using GitHub Models endpoint
              url = "https://api.github.com/models/gpt-4.1-mini/generations"
              
              prompt = f"""You are an expert code reviewer. Please review the following git diff and provide:
              1. A brief summary of the changes
              2. Any potential issues or bugs
              3. Suggestions for improvements
              4. Code quality assessment

              Please be concise and focus on actionable feedback.

              Diff:
              {diff_content[:4000]}  # Limit context size
              """
              
              payload = {
                  "model": "gpt-4.1-mini",
                  "messages": [
                      {"role": "system", "content": "You are a helpful code reviewer."},
                      {"role": "user", "content": prompt}
                  ],
                  "temperature": 0.3,
                  "max_tokens": 1500
              }
              
              response = requests.post(url, headers=headers, json=payload)
              if response.status_code == 200:
                  return response.json()
              else:
                  print(f"Error: {response.status_code} - {response.text}")
                  return None

          def post_review_comment(repo_full_name: str, pr_number: int, review_body: str):
              """Post review as PR comment."""
              headers = {
                  "Authorization": f"Bearer {os.environ['GITHUB_TOKEN']}",
                  "Content-Type": "application/json",
              }
              
              url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
              
              payload = {
                  "body": f"## ðŸ¤– Code Review by GitHub Models\n\n{review_body}"
              }
              
              response = requests.post(url, headers=headers, json=payload)
              return response.status_code == 201

          def main():
              repo_full_name = os.environ.get("GITHUB_REPOSITORY")
              pr_number = int(os.environ.get("PR_NUMBER"))
              
              # Get PR diff
              diff_content = get_diff_content(repo_full_name, pr_number)
              
              # Review with GitHub Models
              review_result = review_with_github_models(diff_content)
              
              if review_result:
                  # Extract review from response
                  try:
                      review_content = review_result["choices"][0]["message"]["content"]
                  except (KeyError, IndexError):
                      review_content = "Failed to generate review content."
                  
                  # Post review
                  success = post_review_comment(repo_full_name, pr_number, review_content)
                  if success:
                      print("Review posted successfully!")
                  else:
                      print("Failed to post review.")
              else:
                  print("Failed to generate review.")

          if __name__ == "__main__":
              main()
          EOF
          
          python review.py